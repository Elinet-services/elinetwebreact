import { CSSProperties, Dispatch, ReactNode, SetStateAction } from 'react';
import { BaseComponent } from 'src/types/baseComponent';
interface DatepickerProps extends BaseComponent {
    cancelBtnText?: string;
    clearBtnText?: ReactNode;
    customIcon?: string;
    defaultValue?: string;
    icon?: string;
    inputLabel?: ReactNode;
    inputToggle?: boolean;
    inline?: boolean;
    format?: string;
    filter?: (date: Date) => boolean;
    min?: Date;
    max?: Date;
    monthsShort?: Array<string>;
    monthsFull?: Array<string>;
    okBtnText?: ReactNode;
    startDay?: number;
    title?: string;
    views?: 'days' | 'months' | 'years';
    weekdaysShort?: Array<string>;
    weekdaysNarrow?: Array<string>;
    weekdaysFull?: Array<string>;
    onChange?: (value: string, date: Date) => void;
    onClose?: () => void;
    onOpen?: () => void;
    value?: string;
    wrapperClass?: string;
    openPicker: 'time' | 'date' | null;
    setOpenPicker: Dispatch<SetStateAction<'time' | 'date' | null>>;
    setDatePickerValue: Dispatch<SetStateAction<string>>;
    datePickerValue: string;
    referenceElement: HTMLDivElement | null;
    popperElement: HTMLElement | null;
    attributes: {
        [key: string]: {
            [key: string]: string;
        } | undefined;
    };
    setPopperElement: Dispatch<SetStateAction<HTMLElement | null>>;
    styles: {
        [key: string]: CSSProperties;
    };
    [rest: string]: any;
}
declare const defaultDatepickerProps: {
    closeOnEsc: boolean;
    title: string;
    okBtnText: string;
    clearBtnText: string;
    cancelBtnText: string;
    customIcon: string;
    inputLabel: string;
    monthsFull: string[];
    monthsShort: string[];
    views: "days" | "months" | "years";
    format: string;
    weekdaysFull: string[];
    weekdaysShort: string[];
    weekdaysNarrow: string[];
    startDay: number;
};
export { DatepickerProps, defaultDatepickerProps };
